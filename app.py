import streamlit as st
import requests
import json
from docx import Document
from io import BytesIO

# Set page configuration
st.set_page_config(page_title="Diccionario de Problemas Filos√≥ficos", page_icon="üìö", layout="wide")

# Function to set the background color
def set_background_color(color):
    st.markdown(
        f"""
        <style>
        .stApp {{
            background-color: {color};
        }}
        </style>
        """,
        unsafe_allow_html=True
    )

# Function to create the information column
def crear_columna_info():
    st.markdown("""
    ### Sobre esta aplicaci√≥n

    Esta aplicaci√≥n es un Diccionario de Problemas Filos√≥ficos. Permite a los usuarios obtener respuestas a problemas filos√≥ficos seg√∫n la interpretaci√≥n de diversas corrientes filos√≥ficas.

    ### C√≥mo usar la aplicaci√≥n:

    1. Elija un problema filos√≥fico de la lista predefinida o proponga su propio problema.
    2. Seleccione una o m√°s corrientes filos√≥ficas.
    3. Haga clic en "Obtener respuesta" para generar las respuestas.
    4. Lea las respuestas y fuentes proporcionadas.
    5. Si lo desea, descargue un documento DOCX con toda la informaci√≥n.

    ### Autor y actualizaci√≥n:
    **Moris Polanco**, 26 ag 2024

    ### C√≥mo citar esta aplicaci√≥n (formato APA):
    Polanco, M. (2024). *Diccionario de Problemas Filos√≥ficos* [Aplicaci√≥n web]. https://dicproblemasfil.streamlit.app

    ---
    **Nota:** Esta aplicaci√≥n utiliza inteligencia artificial para generar respuestas basadas en informaci√≥n disponible en l√≠nea. Siempre verifique la informaci√≥n con fuentes acad√©micas para un an√°lisis m√°s profundo.
    """)

# Titles and Main Column
st.title("Diccionario de Problemas Filos√≥ficos")

# Set background color to light yellow
set_background_color("#FFF9C4")  # Light yellow color code

col1, col2 = st.columns([1, 2])

with col1:
    crear_columna_info()

with col2:
    TOGETHER_API_KEY = st.secrets["TOGETHER_API_KEY"]
    SERPER_API_KEY = st.secrets["SERPER_API_KEY"]

    # List of 101 philosophical problems
    problemas_filosoficos = sorted([
        "¬øQu√© es la realidad?", "¬øQu√© es el conocimiento?", "¬øQu√© es la verdad?", "¬øQu√© es la conciencia?", 
        "¬øExiste el libre albedr√≠o?", "¬øCu√°l es el prop√≥sito de la vida?", "¬øQu√© es la moral?", 
        "¬øQu√© es la belleza?", "¬øQu√© es la justicia?", "¬øExiste Dios?", "¬øQu√© es el tiempo?",
        "¬øQu√© es el ser?", "¬øQu√© es la mente?", "¬øQu√© es la identidad?", "¬øQu√© son los n√∫meros?",
        "¬øQu√© es el lenguaje?", "¬øQu√© es la ciencia?", "¬øQu√© es la percepci√≥n?", "¬øQu√© es la felicidad?",
        "¬øQu√© es el arte?", "¬øQu√© es el alma?", "¬øQu√© es la libertad?", "¬øQu√© es la igualdad?",
        "¬øQu√© es la virtud?", "¬øQu√© es el bien?", "¬øQu√© es el mal?", "¬øQu√© es el destino?", 
        "¬øQu√© es el azar?", "¬øQu√© es la causalidad?", "¬øQu√© es la necesidad?", "¬øQu√© es la contingencia?", 
        "¬øQu√© es la justicia social?", "¬øQu√© es el poder?", "¬øQu√© es el deber?", "¬øQu√© es la responsabilidad?", 
        "¬øQu√© es el ego?", "¬øQu√© es el inconsciente?", "¬øQu√© es la subjetividad?", "¬øQu√© es la experiencia?",
        "¬øQu√© es la fenomenolog√≠a?", "¬øQu√© es el estructuralismo?", "¬øQu√© es el deconstruccionismo?", 
        "¬øQu√© es el nihilismo?", "¬øQu√© es el relativismo?", "¬øQu√© es el solipsismo?", "¬øQu√© es el existencialismo?", 
        "¬øQu√© es la metaf√≠sica?", "¬øQu√© es la epistemolog√≠a?", "¬øQu√© es la est√©tica?", "¬øQu√© es la pol√≠tica?", 
        "¬øQu√© es la √©tica?", "¬øQu√© es la l√≥gica?", "¬øQu√© es la dial√©ctica?", "¬øQu√© es el materialismo?", 
        "¬øQu√© es el idealismo?", "¬øQu√© es el empirismo?", "¬øQu√© es el racionalismo?", "¬øQu√© es el pragmatismo?", 
        "¬øQu√© es el positivismo?", "¬øQu√© es el constructivismo?", "¬øQu√© es el naturalismo?", "¬øQu√© es el humanismo?",
        "¬øQu√© es la alienaci√≥n?", "¬øQu√© es la trascendencia?", "¬øQu√© es la inmanencia?", "¬øQu√© es la nada?", 
        "¬øQu√© es el ser-en-s√≠?", "¬øQu√© es el ser-para-s√≠?", "¬øQu√© es la esencia?", "¬øQu√© es la existencia?", 
        "¬øQu√© es la autenticidad?", "¬øQu√© es la absurdidad?", "¬øQu√© es la angustia?", "¬øQu√© es la desesperaci√≥n?", 
        "¬øQu√© es el amor?", "¬øQu√© es la muerte?", "¬øQu√© es la eternidad?", "¬øQu√© es el infinito?",
        "¬øQu√© es el cosmos?", "¬øQu√© es la armon√≠a?", "¬øQu√© es el conflicto?", "¬øQu√© es la dial√©ctica?", 
        "¬øQu√© es la lucha de clases?", "¬øQu√© es el contrato social?", "¬øQu√© es la anarqu√≠a?", 
        "¬øQu√© es la utop√≠a?", "¬øQu√© es la distop√≠a?", "¬øQu√© es la secularizaci√≥n?", "¬øQu√© es el dogmatismo?", 
        "¬øQu√© es el escepticismo?", "¬øQu√© es el misticismo?", "¬øQu√© es el pante√≠smo?", "¬øQu√© es el dualismo?", 
        "¬øQu√© es el monismo?", "¬øQu√© es la pluralidad?", "¬øQu√© es el universalismo?", "¬øQu√© es el particularismo?", 
        "¬øQu√© es el sincretismo?", "¬øQu√© es el fundamentalismo?", "¬øQu√© es el multiculturalismo?", "¬øQu√© es la alteridad?"
    ])

    # List of philosophical schools of thought
    corrientes_filosoficas = [
        "Idealismo", "Realismo", "Existencialismo", "Pragmatismo", "Empirismo", 
        "Racionalismo", "Feminismo", "Positivismo", "Marxismo", "Fenomenolog√≠a", 
        "Estructuralismo", "Constructivismo", "Posmodernismo", "Nihilismo", "Humanismo"
    ]

    def buscar_informacion(query, corriente):
        url = "https://google.serper.dev/search"
        payload = json.dumps({
            "q": f"{query} {corriente} filosof√≠a"
        })
        headers = {
            'X-API-KEY': SERPER_API_KEY,
            'Content-Type': 'application/json'
        }
        response = requests.post(url, headers=headers, data=payload)
        return response.json()

    def generar_respuesta(problema, corriente, contexto):
        url = "https://api.together.xyz/inference"
        payload = json.dumps({
            "model": "mistralai/Mixtral-8x7B-Instruct-v0.1",
            "prompt": f"Contexto: {contexto}\n\nProblema: {problema}\nCorriente: {corriente}\n\nProporciona una respuesta al problema filos√≥fico '{problema}' seg√∫n la interpretaci√≥n del {corriente}. La respuesta debe ser concisa pero informativa, similar a una entrada de diccionario. Si es posible, incluye una referencia a una obra o figura espec√≠fica de {corriente} que trate este concepto.\n\nRespuesta:",
            "max_tokens": 2048,
            "temperature": 0,
            "top_p": 0.7,
            "top_k": 50,
            "repetition_penalty": 0,
            "stop": ["Problema:"]
        })
        headers = {
            'Authorization': f'Bearer {TOGETHER_API_KEY}',
            'Content-Type': 'application/json'
        }
        response = requests.post(url, headers=headers, data=payload)
        return response.json()['output']['choices'][0]['text'].strip()

    def create_docx(problema, respuestas, fuentes):
        doc = Document()
        doc.add_heading('Diccionario de Problemas Filos√≥ficos', 0)

        doc.add_heading('Problema', level=1)
        doc.add_paragraph(problema)

        for corriente, respuesta in respuestas.items():
            doc.add_heading(f'Respuesta seg√∫n la corriente {corriente}', level=2)
            doc.add_paragraph(respuesta)

        doc.add_heading('Fuentes', level=1)

        # Limitar la lista de fuentes a las primeras 10
        for fuente in fuentes[:10]:
            doc.add_paragraph(fuente, style='List Bullet')

        doc.add_paragraph('\nNota: Este documento fue generado por un asistente de IA. Verifica la informaci√≥n con fuentes acad√©micas para un an√°lisis m√°s profundo.')

        return doc

    st.write("**Elige un problema filos√≥fico de la lista o prop√≥n tu propio problema**:")

    opcion = st.radio("", ["Elegir de la lista", "Proponer mi propio problema"])

    if opcion == "Elegir de la lista":
        problema = st.selectbox("Selecciona un problema:", problemas_filosoficos)
    else:
        problema = st.text_input("Ingresa tu propio problema filos√≥fico:")

    st.write("Selecciona una o m√°s corrientes filos√≥ficas (m√°ximo 5):")
    corrientes_seleccionadas = st.multiselect("Corrientes Filos√≥ficas", corrientes_filosoficas)

    if len(corrientes_seleccionadas) > 5:
        st.warning("Has seleccionado m√°s de 5 corrientes. Por favor, selecciona un m√°ximo de 5.")
    else:
        if st.button("Obtener respuesta"):
            if problema and corrientes_seleccionadas:
                with st.spinner("Buscando informaci√≥n y generando respuestas..."):
                    respuestas, todas_fuentes = {}, []

                    for corriente in corrientes_seleccionadas:
                        # Buscar informaci√≥n relevante
                        resultados_busqueda = buscar_informacion(problema, corriente)
                        contexto = "\n".join([item["snippet"] for item in resultados_busqueda.get("organic", [])])
                        fuentes = [item["link"] for item in resultados_busqueda.get("organic", [])]

                        # Generar respuesta
                        respuesta = generar_respuesta(problema, corriente, contexto)

                        respuestas[corriente] = respuesta
                        todas_fuentes.extend(fuentes)

                    # Mostrar las respuestas
                    st.subheader(f"Respuestas para el problema: {problema}")
                    for corriente, respuesta in respuestas.items():
                        st.markdown(f"**{corriente}:** {respuesta}")

                    # Bot√≥n para descargar el documento
                    doc = create_docx(problema, respuestas, todas_fuentes)
                    buffer = BytesIO()
                    doc.save(buffer)
                    buffer.seek(0)
                    st.download_button(
                        label="Descargar respuesta en DOCX",
                        data=buffer,
                        file_name=f"Respuesta_{problema.replace(' ', '_')}.docx",
                        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                    )
            else:
                st.warning("Por favor, selecciona un problema y al menos una corriente.")
